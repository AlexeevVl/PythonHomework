#Задание 1
#Дан список с визитами по городам и странам.Напишите код,который возвращает отфильтрованный список geo_logs, содержащий
#только визиты из России.Считайте, что список geo_logs легко помещается в оперативной памяти.

geo_logs = [
    ['visit1',['Москва', 'Россия']],
    ['visit2',['Дели', 'Индия']],
    ['visit3',['Владимир', 'Россия']],
    ['visit4',['Лиссабон', 'Португалия']],
    ['visit5',['Париж', 'Франция']],
    ['visit6',['Лиссабон', 'Португалия']],
    ['visit7',['Тула', 'Россия']],
    ['visit8',['Тула', 'Россия']],
    ['visit9',['Курск', 'Россия']],
    ['visit10',['Архангельск', 'Россия']],
]

print([x[0] for x in geo_logs if 'Россия' in x[1]])

#Задание 2
#Выведите на экран все уникальные гео - ID из значений словаря ids.Т.е.список вида[213, 15, 54, 119, 98, 35]

ids = {'user1': [213, 213, 213, 15, 213], 'user2': [54, 54, 119, 119, 119], 'user3': [213, 98, 98, 35]}
uniq_geo=set([y for x in ids.values() for y in x])
print(uniq_geo)


#Задание 3
#Список поисковых запросов.Получить распределение количества слов в них.Т.е.поисковых запросов из одного слова 5 %,
#из двух - 7 %, из трех - 3 % итд.

queries = [
    'смотреть сериалы онлайн',
    'новости спорта',
    'афиша кино',
    'курс доллара',
    'сериалы этим летом',
    'курс по питону',
    'сериалы про спорт',
    'яндекс'
]

queries_data=[x.split(' ') for x in queries]
dict_query={}
for i in queries_data:
    if len(i) in dict_query:
        dict_query[len(i)]+=1
    else:
        dict_query[len(i)]=1
for key,val in dict_query.items():
    dict_query.update({key:'{:.2f} %'.format(val/len(queries)*100)})
print(dict_query)



#Задание 4 *

#Дана статистика рекламных каналов по объемам продаж.Напишите скрипт, который возвращает название канала с максимальным объемом.
#Т.е.в данном примере скрипт должен возвращать 'yandex'.

stats = {'facebook': 55, 'yandex': 120, 'vk': 115, 'google': 99, 'email': 42, 'ok': 98}


key_max = max(stats.keys(), key=(lambda k: stats[k]))
print(key_max)


#Задание 5*

#Дан поток логов по количеств просмотренных страниц для каждого пользователя.Список отсортирован по ID пользователя.
#Вам необходимо написать алгоритм, который считает среднее значение просмотров на пользователя.Т.е.надо посчитать отношение
#суммы всех просмотров к количеству уникальных пользователей.Учтите, что весь список stream не помещается в оперативную память,
#т.е.его нужно обрабатывать поэлементно в цикле.

stream = [
    '2018-01-01,user1,3',
    '2018-01-07,user1,4',
    '2018-03-29,user1,1',
    '2018-04-04,user1,13',
    '2018-01-05,user2,7',
    '2018-06-14,user3,4',
    '2018-07-02,user3,10',
    '2018-03-21,user4,19',
    '2018-03-22,user4,4',
    '2018-04-22,user4,8',
    '2018-05-03,user4,9',
    '2018-05-11,user4,11',
]

dict_logs={}
for i in stream:
    temp=i.split(',')
    if temp[1] in dict_logs:
        dict_logs[temp[1]]=int(temp[2])+dict_logs[temp[1]]
    else:
        dict_logs[temp[1]]=int(temp[2])
print(sum(dict_logs.values())/len(dict_logs))

#Задание 6*

#Дана статистика рекламных кампаний по дням.Напишите алгоритм, который по паре дата - кампания ищет значение
#численного столбца.Т.е.для даты '2018-01-01' и 'google' нужно получить число 25. Считайте, что все комбинации
#дата - кампания уникальны, а список stats легко помещается в оперативной памяти.

stats = [
        ['2018-01-01', 'google', 25],
        ['2018-01-01', 'yandex', 65],
        ['2018-01-01', 'market', 89],
        ['2018-01-02', 'google', 574],
        ['2018-01-02', 'yandex', 249],
        ['2018-01-02', 'market', 994],
        ['2018-01-03', 'google', 1843],
        ['2018-01-03', 'yandex', 1327],
        ['2018-01-03', 'market', 1764],
]
std_in=['2018-01-01','google']

for i in stats:
    if std_in[0] in i and std_in[1] in i:
        print(i[2])


#Бонусный вариант *

#Рассмотрите обобщенный вариант этой задачи: имеется таблица из n столбцов.Первые n - 1 столбцов - признаки(комбинации
#этих признаков в таблице уникальные).Последний столбец - значение.Вам необходимо по набору n - 1 признаков найти
#соответствующую строчку в таблице и вернуть значение из правого столбца. Учтите, что исходная таблица может быть любого размера.
#Одно из  применений задачи - объединение двух таблиц по n столбцов, одна из которых помещается в оперативной памяти.
#Например, 7 столбцов по 1 и 10 миллионов строк/

stats = [
        ['2018-01-01', 'google', 25],
        ['2018-01-01', 'yandex', 65],
        ['2018-01-01', 'market', 89],
        ['2018-01-02', 'google', 574],
        ['2018-01-02', 'yandex', 249],
        ['2018-01-02', 'market', 994],
        ['2018-01-03', 'google', 1843],
        ['2018-01-03', 'yandex', 1327],
        ['2018-01-03', 'market', 1764],
]
std_in=['2018-01-03','google']
for i in stats:
    k=0
    for j in std_in:
        if j in i: k+=1
    if k==len(std_in):
        print(i[len(i)-1])
        break
